import unittest
from pathlib import Path

from argparse import Namespace
import tempfile
import json
from . import BaseTest
from src.main import main

test_dir = Path(__file__).parent.parent

minimum_objects_d = {
    "Building": {
        "Test Building": {}
    },
    "GlobalGeometryRules": {
        "GlobalGeometryRules 1": {
            "coordinate_system": "Relative",
            "starting_vertex_position": "UpperLeftCorner",
            "vertex_entry_direction": "Counterclockwise"
        }
    }
}

hot_water_loop = {
    "HVACTemplate:Plant:HotWaterLoop": {
        "Hot Water Loop": {
            "hot_water_design_setpoint": 82,
            "hot_water_plant_operation_scheme_type": "Default",
            "hot_water_pump_configuration": "ConstantFlow",
            "hot_water_pump_rated_head": 179352,
            "hot_water_reset_outdoor_dry_bulb_high": 10,
            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
            "pump_control_type": "Intermittent"
        }
    }
}


class TestUserWarnings(BaseTest, unittest.TestCase):
    """
    Test warnings generated by user behaviour
    """
    def setUp(self):
        return

    def tearDown(self):
        return

    def test_two_hot_water_loop_templates_with_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Version": {
                        "Version 1": {
                            "version_identifier": "9.4"
                        }
                    },
                    "HVACTemplate:Plant:HotWaterLoop": {
                        "Hot Water Loop": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        },
                        "Hot Water Loop 2": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['outputPreProcessorMessage'], r'.*Input file does not meet schema format')
        return

    def test_two_hot_water_loop_templates_no_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Version": {
                        "Version 1": {
                            "version_identifier": "9.4"
                        }
                    },
                    "HVACTemplate:Plant:HotWaterLoop": {
                        "Hot Water Loop": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        },
                        "Hot Water Loop 2": {
                            "hot_water_design_setpoint": 82,
                            "hot_water_plant_operation_scheme_type": "Default",
                            "hot_water_pump_configuration": "ConstantFlow",
                            "hot_water_pump_rated_head": 179352,
                            "hot_water_reset_outdoor_dry_bulb_high": 10,
                            "hot_water_reset_outdoor_dry_bulb_low": -6.7,
                            "hot_water_setpoint_at_outdoor_dry_bulb_high": 65.6,
                            "hot_water_setpoint_at_outdoor_dry_bulb_low": 82.2,
                            "hot_water_setpoint_reset_type": "OutdoorAirTemperatureReset",
                            "pump_control_type": "Intermittent"
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=True
                )
            )
        self.assertRegex(output['outputPreProcessorMessage'], r'.*Only one HVACTemplate:Plant:HotWaterLoop.*')
        return

    def test_two_chilled_water_loop_templates_with_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Version": {
                        "Version 1": {
                            "version_identifier": "9.4"
                        }
                    },
                    "HVACTemplate:Plant:ChilledWaterLoop": {
                        "Chilled Water Loop": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        },
                        "Chilled Water Loop 2": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['outputPreProcessorMessage'], r'.*Input file does not meet schema format')
        return

    def test_two_chilled_water_loop_templates_no_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Version": {
                        "Version 1": {
                            "version_identifier": "9.4"
                        }
                    },
                    "HVACTemplate:Plant:ChilledWaterLoop": {
                        "Chilled Water Loop": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        },
                        "Chilled Water Loop 2": {
                            "chilled_water_design_setpoint": 7.22,
                            "chilled_water_pump_configuration": "ConstantPrimaryNoSecondary",
                            "chilled_water_reset_outdoor_dry_bulb_high": 26.7,
                            "chilled_water_reset_outdoor_dry_bulb_low": 15.6,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_high": 6.7,
                            "chilled_water_setpoint_at_outdoor_dry_bulb_low": 12.2,
                            "chilled_water_setpoint_reset_type": "None",
                            "chiller_plant_operation_scheme_type": "Default",
                            "condenser_plant_operation_scheme_type": "Default",
                            "condenser_water_design_setpoint": 29.4,
                            "condenser_water_pump_rated_head": 179352,
                            "minimum_outdoor_dry_bulb_temperature": 7.22,
                            "primary_chilled_water_pump_rated_head": 179352,
                            "pump_control_type": "Intermittent",
                            "secondary_chilled_water_pump_rated_head": 179352
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=True
                )
            )
        self.assertRegex(output['outputPreProcessorMessage'], r'.*Only one HVACTemplate:Plant:ChilledWaterLoop.*')
        self.assertRegex(output['outputPreProcessorMessage'], r'.*You must specify at least one.*')
        return

    def test_two_mixed_water_loop_templates_with_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Version": {
                        "Version 1": {
                            "version_identifier": "9.4"
                        }
                    },
                    "HVACTemplate:Plant:MixedWaterLoop": {
                        "Only Water Loop": {
                            "high_temperature_design_setpoint": 30,
                            "low_temperature_design_setpoint": 20,
                            "operation_scheme_type": "Default",
                            "pump_control_type": "Intermittent",
                            "water_pump_configuration": "ConstantFlow",
                            "water_pump_rated_head": 179352
                        },
                        "Only Water Loop 2": {
                            "high_temperature_design_setpoint": 30,
                            "low_temperature_design_setpoint": 20,
                            "operation_scheme_type": "Default",
                            "pump_control_type": "Intermittent",
                            "water_pump_configuration": "ConstantFlow",
                            "water_pump_rated_head": 179352
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['outputPreProcessorMessage'], r'.*Input file does not meet schema format')
        return

    def test_two_mixed_water_loop_templates_no_schema(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Version": {
                        "Version 1": {
                            "version_identifier": "9.4"
                        }
                    },
                    "HVACTemplate:Plant:MixedWaterLoop": {
                        "Only Water Loop": {
                            "high_temperature_design_setpoint": 30,
                            "low_temperature_design_setpoint": 20,
                            "operation_scheme_type": "Default",
                            "pump_control_type": "Intermittent",
                            "water_pump_configuration": "ConstantFlow",
                            "water_pump_rated_head": 179352
                        },
                        "Only Water Loop 2": {
                            "high_temperature_design_setpoint": 30,
                            "low_temperature_design_setpoint": 20,
                            "operation_scheme_type": "Default",
                            "pump_control_type": "Intermittent",
                            "water_pump_configuration": "ConstantFlow",
                            "water_pump_rated_head": 179352
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=True
                )
            )
        self.assertRegex(output['outputPreProcessorMessage'], r'.*Only one HVACTemplate:Plant:MixedWaterLoop.*')
        self.assertRegex(output['outputPreProcessorMessage'], r'.*You must specify at least one.*')
        return

    def test_baseboard_hot_water_no_supply_equipment(self):
        with tempfile.NamedTemporaryFile(suffix='.epJSON', mode='w') as temp_file:
            json.dump(
                {
                    **minimum_objects_d,
                    "Version": {
                        "Version 1": {
                            "version_identifier": "9.4"
                        }
                    },
                    "HVACTemplate:Zone:FanCoil": {
                        "FanCoil 1": {
                            "zone_name": 'SPACE1-1',
                            "baseboard_heating_type": 'HotWater'
                        }
                    }
                },
                temp_file)
            temp_file.seek(0)
            output = main(
                Namespace(
                    file=temp_file.name,
                    no_schema=False
                )
            )
        self.assertRegex(output['outputPreProcessorMessage'], r'.*HVACTemplate:Plant:HotWaterLoop and a '
                                                              r'HVACTemplate:Plant:Boiler are needed.*')
        return
